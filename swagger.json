{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "ATWT API for Testing",
        "description": "This is an example api for testing purpose. automatedtestingwithtuyen.com",
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "contact": {
            "name": "Tuyen Nguyen",
            "url": "http://automatedtestingwithtuyen.com",
            "email": "trongtuyen96@gmail.com"
        }
    },
    "host": "atwt-api.herokuapp.com",
    "basePath": "/v1",
    "tags": [
        {
            "name": "user",
            "description": "User own cars"
        },
        {
            "name": "car",
            "description": "Car belongs to user"
        },
        {
            "name": "factory",
            "description": "Factory products foods"
        },
        {
            "name": "food",
            "description": "Food made in factory"
        },
        {
            "name": "zoo",
            "description": "Zoo holds animals"
        },
        {
            "name": "animal",
            "description": "Animal lives in zoo"
        }
    ],
    "schemes": [
        "https"
    ],
    "paths": {
        "/user": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get user with condition",
                "description": "",
                "operationId": "getUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Name of user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "phoneNumber",
                        "description": "Phone number of user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "birthDate",
                        "description": "Birth date of user (greater than or equal)",
                        "type": "string",
                        "format": "date"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfull operation",
                        "schema": {
                            "type": "array",
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Add a new user",
                "description": "",
                "operationId": "postUser",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User object that need to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfull operation"
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/user/{userId}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Find user by Id",
                "description": "Returns a single user",
                "operationId": "getUserById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id of user to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Update an existing user",
                "description": "",
                "operationId": "putUser",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id of user to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Update successfully"
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete a user",
                "description": "",
                "operationId": "deleteUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User Id to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "deprecated": true
            }
        },
        "/user/{userId}/cars": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Find all cars of user by Id",
                "description": "Returns cars belongs to user",
                "operationId": "getAllCarsOfUserById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id of user to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "$ref": "#/definitions/Car"
                        }
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/car": {
            "get": {
                "tags": [
                    "car"
                ],
                "summary": "Get all cars",
                "description": "",
                "operationId": "getAllCar",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Successfull operation",
                        "schema": {
                            "type": "array",
                            "$ref": "#/definitions/Car"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "car"
                ],
                "summary": "Add a new car",
                "description": "",
                "operationId": "postCar",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Car object that need to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Car"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfull operation"
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/car/{carId}": {
            "get": {
                "tags": [
                    "car"
                ],
                "summary": "Find car by Id",
                "description": "Returns a single car",
                "operationId": "getCarById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "carId",
                        "in": "path",
                        "description": "Id of car to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Car"
                        }
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Car not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "car"
                ],
                "summary": "Update an existing car",
                "description": "",
                "operationId": "putCar",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "carId",
                        "in": "path",
                        "description": "Id of car to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Car object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Car"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Update successfully"
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Car not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "car"
                ],
                "summary": "Delete a car",
                "description": "",
                "operationId": "deleteCar",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "carId",
                        "in": "path",
                        "description": "Car Id to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Car not found"
                    }
                }
            }
        },
        "/factory": {
            "get": {
                "tags": [
                    "factory"
                ],
                "summary": "Get all factories",
                "description": "",
                "operationId": "getAllFactory",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Successfull operation",
                        "schema": {
                            "type": "array",
                            "$ref": "#/definitions/Factory"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "factory"
                ],
                "summary": "Add a new factory",
                "description": "",
                "operationId": "postFactory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Factory object that need to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Factory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfull operation"
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/factory/{factoryId}": {
            "get": {
                "tags": [
                    "factory"
                ],
                "summary": "Find factory by Id",
                "description": "Returns a single factory",
                "operationId": "getFactoryById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "factoryId",
                        "in": "path",
                        "description": "Id of factory to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Factory"
                        }
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Factory not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "factory"
                ],
                "summary": "Update an existing factory",
                "description": "",
                "operationId": "putFactory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "factoryId",
                        "in": "path",
                        "description": "Id of factory to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Factory object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Factory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Update successfully"
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Factory not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "factory"
                ],
                "summary": "Delete a factory",
                "description": "",
                "operationId": "deleteFactory",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "factoryId",
                        "in": "path",
                        "description": "Factory Id to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Factory not found"
                    }
                },
                "deprecated": true
            }
        },
        "/factory/{factoryId}/foods": {
            "get": {
                "tags": [
                    "factory"
                ],
                "summary": "Find all foods produced by factory by Id",
                "description": "Returns foods produced by factory",
                "operationId": "getAllFoodsOfFactoryById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "factoryId",
                        "in": "path",
                        "description": "Id of factory to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "$ref": "#/definitions/Food"
                        }
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Factory not found"
                    }
                }
            }
        },
        "/food": {
            "get": {
                "tags": [
                    "food"
                ],
                "summary": "Get all foods",
                "description": "",
                "operationId": "getAllFood",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Successfull operation",
                        "schema": {
                            "type": "array",
                            "$ref": "#/definitions/Food"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "food"
                ],
                "summary": "Add a new food",
                "description": "",
                "operationId": "postFood",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Food object that need to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Food"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfull operation"
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/food/{foodId}": {
            "get": {
                "tags": [
                    "food"
                ],
                "summary": "Find food by Id",
                "description": "Returns a single food",
                "operationId": "getFoodById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "foodId",
                        "in": "path",
                        "description": "Id of food to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Food"
                        }
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Food not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "food"
                ],
                "summary": "Update an existing food",
                "description": "",
                "operationId": "putFood",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "foodId",
                        "in": "path",
                        "description": "Id of food to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Food object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Food"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Update successfully"
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Food not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "food"
                ],
                "summary": "Delete a food",
                "description": "",
                "operationId": "deleteFood",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "foodId",
                        "in": "path",
                        "description": "Food Id to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Food not found"
                    }
                }
            }
        },
        "/zoo": {
            "get": {
                "tags": [
                    "zoo"
                ],
                "summary": "Get all zoo",
                "description": "",
                "operationId": "getAllZoo",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Successfull operation",
                        "schema": {
                            "type": "array",
                            "$ref": "#/definitions/Zoo"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "zoo"
                ],
                "summary": "Add a new zoo",
                "description": "",
                "operationId": "postZoo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Zoo object that need to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Zoo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfull operation"
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/zoo/{zooId}": {
            "get": {
                "tags": [
                    "zoo"
                ],
                "summary": "Find zoo by Id",
                "description": "Returns a single zoo",
                "operationId": "getZooById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "zooId",
                        "in": "path",
                        "description": "Id of zoo to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Zoo"
                        }
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Zoo not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "zoo"
                ],
                "summary": "Update an existing zoo",
                "description": "",
                "operationId": "putZoo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "zooId",
                        "in": "path",
                        "description": "Id of zoo to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Zoo object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Zoo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Update successfully"
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Zoo not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "zoo"
                ],
                "summary": "Delete a zoo",
                "description": "",
                "operationId": "deleteZoo",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "zooId",
                        "in": "path",
                        "description": "Zoo Id to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Zoo not found"
                    }
                },
                "deprecated": true
            }
        },
        "/zoo/{zooId}/animals": {
            "get": {
                "tags": [
                    "zoo"
                ],
                "summary": "Find all animals in the zoo by Id",
                "description": "Returns animals in the zoo",
                "operationId": "getAllAnimalsOfZooById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "zooId",
                        "in": "path",
                        "description": "Id of zoo to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "$ref": "#/definitions/Animal"
                        }
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Zoo not found"
                    }
                }
            }
        },
        "/animal": {
            "get": {
                "tags": [
                    "animal"
                ],
                "summary": "Get all animals",
                "description": "",
                "operationId": "getAllAnimal",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Successfull operation",
                        "schema": {
                            "type": "array",
                            "$ref": "#/definitions/Animal"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "animal"
                ],
                "summary": "Add a new animal",
                "description": "",
                "operationId": "postAnimal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Animal object that need to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Animal"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfull operation"
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/animal/{animalId}": {
            "get": {
                "tags": [
                    "animal"
                ],
                "summary": "Find animal by Id",
                "description": "Returns a single animal",
                "operationId": "getAnimalById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "animalId",
                        "in": "path",
                        "description": "Id of animal to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Animal"
                        }
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Animal not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "animal"
                ],
                "summary": "Update an existing animal",
                "description": "",
                "operationId": "putAnimal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "animalId",
                        "in": "path",
                        "description": "Id of animal to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Animal object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Animal"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Update successfully"
                    },
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Animal not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "animal"
                ],
                "summary": "Delete a animal",
                "description": "",
                "operationId": "deleteAnimal",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "animalId",
                        "in": "path",
                        "description": "Animal Id to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Id supplied"
                    },
                    "404": {
                        "description": "Animal not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "User": {
            "type": "object",
            "required": [
                "name",
                "phoneNumber"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "birthDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "phoneNumber": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "User"
            }
        },
        "Car": {
            "type": "object",
            "required": [
                "userID"
            ],
            "properties": {
                "type": {
                    "type": "string"
                },
                "speed": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Car"
            }
        },
        "Factory": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            },
            "xml": {
                "name": "Factory"
            }
        },
        "Food": {
            "type": "object",
            "required": [
                "factoryID"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                },
                "color": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "factoryID": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Food"
            }
        },
        "Zoo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            },
            "xml": {
                "name": "Zoo"
            }
        },
        "Animal": {
            "type": "object",
            "required": [
                "zooID"
            ],
            "properties": {
                "species": {
                    "type": "string"
                },
                "lifespan": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                },
                "zooID": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Animal"
            }
        }
    }
}